extends /layout

block beforehtml
  -
    const title = '狼人殺'
    const description = '少一個人主持狼人殺嗎？我來幫你主持！'

block style
  meta(name="description" content=description)
  meta(property="og:description", content=description)
  style
    :sass
      [v-cloak]
        display: none
      body
        background: #323232
        color: #fff
      #app
        max-width: 760px

      .page
        min-height: 65vh
      .card-body
        background: #323232
      #page-check
        .card-body
          min-height: 280px

      .btn-secondary
        background: #323232
        border-color: #ffffff
        &:hover, &:focus
          background: #323232
          border-color: #ffffff
          box-shadow: none
      video
        width: 0px
        height: 0px

block content
  include /navbar
  #app.container.mt-3(v-cloak)
    //- video(:src="`${voice}.mp3`" autoplay)
    video(:src="`https://raw.githubusercontent.com/yuanchi17/pug/master/src/audio/${voice}.mp3`" autoplay)
    #page-start.page.d-flex.flex-column(v-if="page === 'start'")
      h3.text-center.my-3 狼人殺
      label.form-check-label.mb-2 平民人數
      input.form-control.mb-3(type="number" min="1" v-model="init.people" placeholder="請輸入")
      label.form-check-label.mb-2 狼人人數（不含狼王）
      input.form-control.mb-3(type="number" min="1" v-model="init.wolf" placeholder="請輸入")
      p.mb-1 特殊角色有…
      #select-gods.d-flex
        .form-check.form-check-inline
          input.form-check-input(type="checkbox" id="selectProphet" v-model="init.prophet")
          label.form-check-label(for="selectProphet") 預言家
        .form-check.form-check-inline
          input.form-check-input(type="checkbox" id="selectWitch" v-model="init.witch")
          label.form-check-label(for="selectWitch") 女巫
        .form-check.form-check-inline
          input.form-check-input(type="checkbox" id="selectHunter" v-model="init.hunter")
          label.form-check-label(for="selectHunter") 獵人
      #select-wolfKing.d-flex.mt-2
        .form-check.form-check-inline
          input.form-check-input(type="checkbox" id="selectWokfKing" v-model="init.wolfKing")
          label.form-check-label(for="selectWokfKing") 狼王
      button.btn.btn-secondary.my-3(type="button", @click="btnCheckCount") 開始遊戲
    #page-check.page.d-flex.flex-column(v-else-if="page === 'checkRole'")
      h3.text-center.my-3 狼人殺
      .card(v-if="checkRole")
        .card-body.d-flex.flex-column
          h4.card-title.text-center.my-auto {{ role.id }} 號，{{ role.name }}
          p.text-center {{ role.text }}
          p.text-center(v-if="playerNo > roles.length") 點擊確認後，將手機放置桌面中間
          p.text-center(v-else) 點擊確認後傳給下一位
          button.btn.btn-secondary.btn-block.mt-auto(type="button", @click="btnNextRole()") 確認
      .card(v-else)
        .card-body.d-flex.flex-column
          h4.card-title.text-center.my-auto(v-if="playerNo === roles.length") 所有玩家請將手放置手機附近，遊戲即將開始
          h4.card-title.text-center.my-auto(v-else) 我是誰？
          button.btn.btn-secondary.btn-block.mt-auto(type="button", @click="btnNextRole(true)") {{ playerNo > roles.length ? '進入黑夜' : '查看角色' }}
    #page-night.page.d-flex.flex-column.justify-content-center(v-else-if="page === 'night'")
      .all-close(v-if="process.status === 'close'")
        h3.text-center {{ getRoleCh }}請閉眼
      h3.text-center(v-else) {{ getRoleCh }}請睜眼
    #page-wolf.page.d-flex.flex-column.justify-content-center(v-else-if="page === 'wolf'")
      h3.text-center 狼人現身，你們要殺誰？
      .show-number.d-flex.flex-wrap.justify-content-center
        button.btn.btn-secondary.m-1(type="button", @click="btnWolfSkill(r.id)", v-for="r in roles" :key=r v-if="r.life") {{ _.padStart(r.id, 2, '0') }} 號
      button.btn.btn-secondary.btn-block.mt-3(type="button", @click="awaitChangeVoice('wolfUndefined')") 沒找到其他狼人
    #page-prophet.page.d-flex.flex-column.justify-content-center(v-else-if="page === 'prophet'")
      h3.text-center 預言家，請問你要查誰？
      .show-number.d-flex.flex-wrap.justify-content-center(v-if="_.get(_.find(roles, { name: '預言家' }), 'life')")
        button.btn.btn-secondary.m-1(type="button", @click="btnProphetSkill(r.id)", v-for="r in roles" :key=r v-if="r.life") {{ _.padStart(r.id, 2, '0') }} 號
      button.btn.btn-secondary.m-1(type="button", @click="btnProphetNext()", v-else) 你已被殺死，請按我跳過
    #page-witch.page.d-flex.flex-column.justify-content-center(v-else-if="page === 'witch'")
      h3.text-center 女巫{{ voice === 'witchOpen' ? '請睜眼' : '，你要毒誰？'}}
      .show-number.d-flex.flex-wrap.justify-content-center(v-if="voice === 'witchKill'")
        button.btn.btn-secondary.m-1(type="button", @click="btnWitchSkill(r.id)", v-for="r in roles" :key=r v-if="r.life") {{ _.padStart(r.id, 2, '0') }} 號
    #page-bright.page.d-flex.flex-column.justify-content-center(v-else-if="page === 'bright'")
      h3.text-center 天亮了，請睜眼
      h4.text-center 昨晚 {{ willKill.length ? `${_.join(willKill, '、')} 號被殺了` : '是個平安夜'}}
      #game-ing(v-if="!game.status")
        button.btn.btn-secondary.btn-block.mt-3.mb-1(type="button", @click="pageNight()") 天黑了
        .btn-take-one(v-if="hasHunterOrWolfking")
          button.btn.btn-secondary.btn-block.mt-3.mb-1(type="button", @click="page = 'takeOne'") 發動技能
          p.text-center 只有獵人或狼王可以使用
      #game-over.mt-3(v-else)
        .card.show-number
          .card-body.d-flex.flex-column
            h3.card-title.text-center {{ game.loser }}陣亡，{{ game.winner }}勝利
            p.text-center
              span(v-for="(r, i) in roles" :key=r) {{ r.id }} 號{{ r.name }}{{ i < roles.length - 1 ? '、' : ''}}
            button.btn.btn-secondary.btn-block.mt-auto(type="button", @click="page = 'start'") 再玩一局
    #page-take-one.page.d-flex.flex-column.justify-content-center(v-else-if="page === 'takeOne'")
      h3.text-center 你要帶走誰？
      .show-number.d-flex.flex-wrap.justify-content-center
        button.btn.btn-secondary.m-1(type="button", @click="btnTakeOneSkill(r.id)", v-for="r in roles" :key=r v-if="r.life") {{ _.padStart(r.id, 2, '0') }} 號

block script
  script(src="https://cdn.jsdelivr.net/npm/moment@2/moment.min.js")
  script.
    const ROLES = {
      people: {
        name: '平民',
        type: 'people',
        text: '努力獲取線索，抓出狼人，不然你也不能幹嘛',
        skill: {},
      },
      prophet: {
        name: '預言家',
        type: 'god',
        text: '每晚可以查驗一名玩家是好人還是狼人',
        skill: {},
      },
      witch: {
        name: '女巫',
        type: 'god',
        text: '有解藥及毒藥各一瓶，使用規則依玩家們為主',
        skill: { help: 1, kill: 1 },
      },
      hunter: {
        name: '獵人',
        type: 'god',
        text: '除被毒殺之外，死後可決定是否要帶走一名玩家',
        skill: { kill: 1 },
      },
      wolf: {
        name: '狼人',
        type: 'wolf',
        text: '每晚皆可與其他狼人討論要殺誰，如果你的夥伴都還活著的話',
        skill: {},
      },
      wolfKing: {
        name: '狼王',
        type: 'wolf',
        text: '每晚皆可與其他狼人討論要殺誰，死後可決定是否要帶走一名玩家',
        skill: { kill: 1 },
      },
    }
    const ROLE_LIST = {
      all: '天黑了',
      wolf: '狼人',
      prophet: '預言家',
      witch: '女巫',
      hunter: '獵人',
    }
    const SECONDS = 5000 // 等待 5 秒

    window.sleep = t => new Promise(resolve => { setTimeout(resolve, t) })
    window.vm = new Vue({
      el: '#app',
      data: {
        page: 'start',
        init: { // 人數確認會依照順序
          people: 3,
          wolf: 3,
          wolfKing: false,
          prophet: true,
          witch: true,
          hunter: true,
        },
        voice: '', // 要說的音檔名稱
        process: { // 更新哪個角色要閉眼睜眼
          roleEn: '',
          status: 'close',
        },
        playerNo: 0,
        role: {},
        roles: [],
        willKill: [],
        checkRole: false,
        game: { status: false, winner: '', loser: '' },
      },
      mounted () {
      },
      computed: {
        hasHunterOrWolfking () { return !!(_.find(this.roles, { name: '獵人' }) || _.find(this.roles, { name: '狼王' })) },
        getRoleCh () { return _.get(ROLE_LIST, this.process.roleEn, '') },
      },
      methods: {
        async init () {
          this.roles = []
          this.page = 'start'
        },
        async btnCheckCount () {
          // 轉換格式
          this.roles = _.compact(_.flatten(_.map(this.init, (count, role) => {
            if (!count) return
            return _.times(count, () => ({ id: null, life: true, ...ROLES[role] }))
          })))

          // 玩家人數 = 0
          if (!this.roles.length) {
            await Swal.fire({ icon: 'warning', title: '請輸入初始角色' })
            return
          }
          // 玩家人數確認
          const players = _.compact(_.map(this.init, (count, role) => {
            if (!count) return
            return _.isBoolean(count) ? ROLES[role].name : `${ROLES[role].name}*${count}`
          }))
          const result = await Swal.fire({
            title: '人數確認',
            text: players.join('、'),
            showCancelButton: true,
            cancelButtonText: '調整人數',
            confirmButtonText: '開始遊戲',
          })
          if (!result.isConfirmed) return
          this.page = 'checkRole'
        },
        async btnNextRole (btnCheck = false) {
          this.checkRole = btnCheck
          if (!btnCheck) return // 非"確認角色頁面"
          if (this.playerNo === this.roles.length && btnCheck) {
            this.pageNight(true) // 全部玩家已確認身分
            return
          }

          const role = _.chain(this.roles)
            .groupBy('id')
            .get(null)
            .sample()
            .set('id', this.playerNo + 1)
            .value()
    
          console.log(`確認角色：${role.id} 號，${role.name}`)
          this.$set(this, 'role', role)
          this.playerNo++
        },
        async pageNight (first = false) {
          if (first) {
            console.log('全部玩家已確認身分，遊戲開始')
            this.roles = _.orderBy(this.roles, 'id')
          }

          this.willKill = []
          await this.updateNight('all', 'close', 'night')
          await this.updateNight('wolf', 'open', 'wolfOpen')
        },
        async btnWolfSkill (rId) {
          const result = await this.checkSelectAlert(`確認要殺 ${rId} 號？`)
          if (!result.isConfirmed) return

          this.willKill.push(rId)
          await this.updateNight('wolf', 'close', 'wolfClose')
          this.pageProphet()
        },
        async pageProphet () {
          // 遊戲初始沒有預言家
          if (!this.init.prophet) {
            this.pageWitch()
            return
          }

          await this.updateNight('prophet', 'open', 'prophetOpen')
        },
        async btnProphetSkill (rId) {
          const result = await this.checkSelectAlert(`確認要查 ${rId} 號？`)
          if (!result.isConfirmed) return

          const role = this.roles[rId - 1]
          await Swal.fire({
            icon: `${role.type === 'wolf' ? 'error' : 'success'}`,
            title: `他是${role.type === 'wolf' ? '壞' : '好'}人`,
            confirmButtonText: '確定',
          })
          await this.updateNight('prophet', 'close', 'prophetClose')
          this.pageWitch()
        },
        async pageWitch () {
          // 遊戲初始沒有女巫
          if (!this.init.witch) {
            this.pageBright()
            return
          }

          const witch = _.find(this.roles, { name: '女巫' })
          // 女巫睜眼，是否要使用解藥
          await this.updateNight('witch', 'open', 'witchOpen')
          if (!witch.life) {
            await Swal.fire({ title: '你已被殺死，但流程還是要跑', confirmButtonText: '確定' })
            await this.awaitChangeVoice('witchKill')
            await Swal.fire({ title: '等等！別急著走，還有一次XD', confirmButtonText: '確定' })
            await this.updateNight('witch', 'close', 'witchClose')
            this.pageBright()
            return
          }

          await this.askWitchUseHelp(witch)
          await this.ashWitchUseKill(witch) // 是否要使用毒藥
        },
        async askWitchUseHelp (witch) {
          if (!_.get(witch, 'skill.help')) await Swal.fire({ title: '你已使用過解藥', confirmButtonText: '確定' })
          else {
            // 是否要使用解藥
            const result = await Swal.fire({
              title: `${this.willKill[0]} 號被殺了，你要救他嗎？`,
              showCancelButton: true,
              cancelButtonText: '不要',
              confirmButtonText: '要',
            })
            if (result.isConfirmed) {
              this.willKill = []
              _.set(_.find(this.roles, { name: '女巫' }), 'skill.help', 0)
            }
          }
        },
        async ashWitchUseKill (witch) {
          await this.awaitChangeVoice('witchKill')
          if (!_.get(witch, 'skill.kill')) {
            await Swal.fire({ title: '你已使用過毒藥', confirmButtonText: '確定' })
            await this.updateNight('witch', 'close', 'witchClose')
            this.pageBright()
            return
          }
          const result = await Swal.fire({
            title: '要使用毒藥嗎？',
            showCancelButton: true,
            cancelButtonText: '不要',
            confirmButtonText: '要',
          })
          if (!result.isConfirmed) {
            await this.updateNight('witch', 'close', 'witchClose')
            this.pageBright()
          }
        },
        async btnWitchSkill (rId) {
          const result = await this.checkSelectAlert(`確認要毒 ${rId} 號？`)
          if (!result.isConfirmed) return

          this.willKill.push(rId)
          _.set(_.find(this.roles, { name: '女巫' }), 'skill.kill', 0)

          await this.updateNight('witch', 'close', 'witchClose')
          this.pageBright()
        },
        async pageBright () {
          await this.awaitChangeVoice('allOpen')
          const willKill = this.willKill.sort()
          this.page = 'bright'

          // 平安夜
          if (!willKill.length) {
            this.voice = 'safeNight'
            return
          }
          _.each(willKill, rId => { this.roles[rId - 1].life = false })
          this.game.status = this.isGameOver()
        },
        async btnTakeOneSkill (rId) { // 獵人、狼王的技能 TODO:發動技能後的流程確認
          const result = await this.checkSelectAlert(`確認要帶走 ${rId} 號？`)
          if (!result.isConfirmed) return

          this.roles[rId - 1].life = false
          this.page = 'bright'
          this.game.status = this.isGameOver()
        },
        async updateNight (roleEn, status, voice) { // 更新哪個角色要閉眼睜眼
          this.$set(this, 'voice', voice)
          this.$set(this, 'process', { roleEn, status })
          this.page = status === 'close' ? 'night' : roleEn
          await window.sleep(SECONDS)
        },
        async checkSelectAlert (title) {
          return await Swal.fire({
            title,
            showCancelButton: true,
            cancelButtonText: '重選',
            confirmButtonText: '確定',
          })
        },
        async btnProphetNext () {
          await this.updateNight('prophet', 'close', 'prophetClose')
          this.pageWitch()
        },
        async awaitChangeVoice (voice) {
          // FIXME: this.voice = '' 因為找不到檔案會有 error，但也只能先這樣
          this.$set(this, 'voice', '')
          await window.sleep(100)
          this.$set(this, 'voice', voice)
        },
        isGameOver () {
          if (this.page !== 'bright') return false

          const life = _.groupBy(_.get(_.groupBy(this.roles, 'life'), 'true'), 'type')

          // 好人勝利
          if (!_.get(life, 'wolf', []).length) {
            this.game.winner = '好人'
            this.game.loser = '狼人'
            return true
          }

          // 狼人勝利
          if (!_.get(life, 'people', []).length || !_.get(life, 'god', []).length) {
            this.game.winner = '狼人'
            this.game.loser = !_.get(life, 'people', []).length ? '人類' : '神職'
            return true
          }

          return false
        },
      },
    })