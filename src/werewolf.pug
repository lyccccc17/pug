extends /layout

block beforehtml
  - const title = '狼人殺'

block style
  style
    :sass
      [v-cloak]
        display: none
      body
        background: #323232
        color: #fff
      #app
        max-width: 760px

      .page
        min-height: 99vh
      .card-body
        background: #323232
      #page-check
        .card-body
          min-height: 280px

      .btn-secondary
        background: #323232
        border-color: #ffffff
        &:hover, &:focus
          background: #323232
          border-color: #ffffff
          box-shadow: none

block content
  include /navbar
  #app.container.mt-3(v-cloak)
    #page-start.page.d-flex.flex-column(v-if="page === 'start'")
      h3.text-center.my-3 狼人殺
      label.form-check-label.mb-2 平民人數
      input.form-control.mb-3(type="number" min="1" v-model="init.people" placeholder="請輸入")
      label.form-check-label.mb-2 狼人人數（不含狼王）
      input.form-control.mb-3(type="number" min="1" v-model="init.wolf" placeholder="請輸入")
      p.mb-1 特殊角色有…
      #select-gods.d-flex
        .form-check.form-check-inline
          input.form-check-input(type="checkbox" id="selectProphet" v-model="init.prophet")
          label.form-check-label(for="selectProphet") 預言家
        .form-check.form-check-inline
          input.form-check-input(type="checkbox" id="selectWitch" v-model="init.witch")
          label.form-check-label(for="selectWitch") 女巫
        .form-check.form-check-inline
          input.form-check-input(type="checkbox" id="selectHunter" v-model="init.hunter")
          label.form-check-label(for="selectHunter") 獵人
      #select-wolfKing.d-flex.mt-2
        .form-check.form-check-inline
          input.form-check-input(type="checkbox" id="selectWokfKing" v-model="init.wolfKing")
          label.form-check-label(for="selectWokfKing") 狼王
      button.btn.btn-secondary.my-3(type="button", @click="pageCheckRole") 開始遊戲
    #page-check.page.d-flex.flex-column(v-else-if="page === 'checkRole'")
      h3.text-center.my-3 狼人殺
      .card(v-if="checkRole")
        .card-body.d-flex.flex-column
          h4.card-title.text-center.my-auto {{ role.id }} 號，{{ role.name }}
          p.text-center {{ role.text }}
          p.text-center(v-if="number > roles.length") 點擊確認後，將手機放置桌面中間
          p.text-center(v-else) 點擊確認後傳給下一位
          button.btn.btn-secondary.btn-block.mt-auto(type="button", @click="btnCheckRole") 確認
      .card(v-else)
        .card-body.d-flex.flex-column
          h4.card-title.text-center.my-auto(v-if="number > roles.length") 玩家請將手伸出並放置手機附近，遊戲即將開始
          h4.card-title.text-center.my-auto(v-else) 我是誰？
          button.btn.btn-secondary.btn-block.mt-auto(type="button", @click="btnCheckRole") {{ number > roles.length ? '進入黑夜' : '查看角色' }}
    #page-night.page.d-flex.flex-column.justify-content-center(v-else-if="page === 'night'")
      .all-close(v-if="night.status === 'close'")
        video(:src="`${_.get(process['night'], 'voice')}.mp3`" autoplay)
        //- video(src="https://raw.githubusercontent.com/yuanchi17/pug/master/src/audio/night.mp3" autoplay)
        h3.text-center {{ process['night'].text }}請閉眼
      h3.text-center(v-else) {{ process['night'].text }}請睜眼
    #page-wolf.page.d-flex.flex-column.justify-content-center(v-else-if="page === 'wolf'")
      h3.text-center 狼人現身，你們要殺誰？
      .show-number.d-flex.flex-wrap.justify-content-center
        button.btn.btn-secondary.m-1(type="button", @click="wolfSkill(r.id)", v-for="r in roles" :key=r) {{ _.padStart(r.id, 2, '0') }} 號
      button.btn.btn-secondary.btn-block.mt-3(type="button", @click="") 沒找到其他狼人
    #page-prophet.page.d-flex.flex-column.justify-content-center(v-else-if="page === 'prophet'")
      h3.text-center 預言家，請問你要查誰？
      .show-number.d-flex.flex-wrap.justify-content-center
        button.btn.btn-secondary.m-1(type="button", @click="prophetSkill(r.id)", v-for="r in roles" :key=r) {{ _.padStart(r.id, 2, '0') }} 號
    #page-witch.page.d-flex.flex-column.justify-content-center(v-else-if="page === 'witch'")
      h3.text-center 你要毒誰？
      .show-number.d-flex.flex-wrap.justify-content-center
        button.btn.btn-secondary.m-1(type="button", @click="witchSkill(r.id)", v-for="r in roles" :key=r) {{ _.padStart(r.id, 2, '0') }} 號
    #page-bright.page.d-flex.flex-column.justify-content-center(v-else-if="page === 'bright'")
      h3.text-center 天亮了，請睜眼
      h4.text-center 昨晚 {{ willKill.length ? `${_.join(willKill, '、')} 號被殺了` : '是個平安夜'}}
      #game-ing(v-if="!game.status")
        button.btn.btn-secondary.btn-block.mt-3.mb-1(type="button", @click="pageNight()") 天黑了
        .btn-take-one(v-if="hasHunterOrWolfking")
          button.btn.btn-secondary.btn-block.mt-3.mb-1(type="button", @click="page === 'takeOne'") 發動技能
          p.text-center 只有獵人或狼王可以使用
      #game-over.mt-3(v-else)
        .card.show-number
          .card-body.d-flex.flex-column
            h3.card-title.text-center {{ game.loser }}陣亡，{{ game.winner }}勝利
            p.text-center
              span(v-for="(r, i) in roles" :key=r) {{ r.id }} 號{{ r.name }}{{ i < roles.length - 1 ? '、' : ''}}
            button.btn.btn-secondary.btn-block.mt-auto(type="button", @click="page = 'start'") 再玩一局
    #page-take-one.page.d-flex.flex-column.justify-content-center(v-else-if="page === 'takeOne'")
      h3.text-center 你要帶走誰？
      .show-number.d-flex.flex-wrap.justify-content-center
        button.btn.btn-secondary.m-1(type="button", @click="takeOneSkill(r.id)", v-for="r in roles" :key=r) {{ _.padStart(r.id, 2, '0') }} 號

block script
  script(src="https://cdn.jsdelivr.net/npm/moment@2/moment.min.js")
  script.
    const ROLES = {
      people: {
        name: '平民',
        type: 'people',
        text: '努力獲取線索，抓出狼人，不然你也不能幹嘛',
        skill: {},
      },
      prophet: {
        name: '預言家',
        type: 'god',
        text: '每晚可以查驗一名玩家是好人還是狼人',
        skill: {},
      },
      witch: {
        name: '女巫',
        type: 'god',
        text: '有解藥及毒藥各一瓶，使用規則依玩家們為主',
        skill: { help: 1, kill: 1 },
      },
      hunter: {
        name: '獵人',
        type: 'god',
        text: '除被毒殺之外，死後可決定是否要帶走一名玩家',
        skill: { kill: 1 },
      },
      wolf: {
        name: '狼人',
        type: 'wolf',
        text: '每晚皆可與其他狼人討論要殺誰，如果你的夥伴都還活著的話',
        skill: {},
      },
      wolfKing: {
        name: '狼王',
        type: 'wolf',
        text: '每晚皆可與其他狼人討論要殺誰，死後可決定是否要帶走一名玩家',
        skill: { kill: 1 },
      },
    }
    const PROCESS = {
      night: { text: '天黑', voice: 'night' },
      wolf: { text: '狼人', voice: 'wolf' },
      prophet: { text: '預言家', voice: 'prophet' },
      witch: { text: '女巫', voice: 'witch' },
      hunter: { text: '獵人', voice: 'hunter' },
    }
    const sleep = t => new Promise(resolve => { setTimeout(resolve, t) })
    const SECONDS = 5000 // 等待 5 秒

    window.vm = new Vue({
      el: '#app',
      data: {
        checkRole: false,
        init: {
          people: 1,
          wolf: 1,
          prophet: false,
          witch: false,
          hunter: false,
          wolfKing: false,
        },
        night: { // 更新哪個角色要閉眼睜眼
          role: '',
          status: 'close',
        },
        number: 1,
        page: 'start',
        process: PROCESS,
        roles: [],
        willKill: [],
        game: { status: false, winner: '', loser: '' },
      },
      mounted () {
      },
      computed: {
        hasHunterOrWolfking () { return !!(_.find(this.roles, { name: '獵人' }) || _.find(this.roles, { name: '狼王' })) },
      },
      methods: {
        async init () {
          this.roles = []
          this.page = 'start'
        },
        async pageCheckRole () {
          //- console.log(document.embeds[0])
          //- document.embeds[0].play()
          const result = await Swal.fire({
            title: '人數確認',
            html: `<p>平民 x${this.init.people}、狼人 x${this.init.wolf}<br>${this.init.prophet ? '預言家<br>' : ''}${this.init.witch ? '女巫<br>' : ''}${this.init.hunter ? '獵人<br>' : ''}${this.init.wolfKing ? '狼王' : ''}</p>`,
            showCancelButton: true,
            cancelButtonText: '調整人數',
            confirmButtonText: '開始遊戲',
          })
          if (!result.isConfirmed) return
          this.roles = _.compact(_.flatten(_.map(this.init, (role, key) => {
            if (!role) return
            return _.times(role, () => ({ id: 0, life: true, ...ROLES[key] }))
          })))
    
          this.page = 'checkRole'
        },
        btnCheckRole () {
          this.checkRole = !this.checkRole

          if (!this.roles.length) return // 沒有角色

          // 全部玩家已確認身分
          if (this.number > this.roles.length && this.checkRole) {
            this.pageNight()
            this.roles = _.orderBy(this.roles, 'id')
            return
          }

          if (!this.checkRole) return
          this.role = _.sample(_.get(_.groupBy(this.roles, 'id'), 0))
          this.role.id = this.number
          this.number += 1
        },
        async pageNight () {
          // TODO voice all close
          this.willKill = []
          this.page = 'night'
          await this.updateNight('all', 'close')

          this.pageWolf()
        },
        async pageWolf () {
          // TODO voice wolf open & skill
          await this.updateNight('wolf', 'open')

          this.page = 'wolf'
        },
        async wolfSkill (rId) {
          const result = await this.checkSelect(`確認要殺 ${rId} 號？`)
          if (!result.isConfirmed) return
          this.willKill.push(rId)

          // TODO voice wolf close
          this.page = 'night'
          await this.updateNight('wolf', 'close')

          this.pageProphet()
        },
        async pageProphet () {
          // 沒有預言家
          if (!this.init.prophet) {
            this.pageWitch()
            return
          }
          // TODO voice prophet open & skill
          await this.updateNight('prophet', 'open')

          this.page = 'prophet'
        },
        async prophetSkill (rId) {
          const result = await this.checkSelect(`確認要查 ${rId} 號？`)
          if (!result.isConfirmed) return
          const role = this.roles[rId - 1]

          await Swal.fire({
            title: `他是${role.type === 'wolf' ? '壞' : '好'}人`,
            confirmButtonText: '確定',
          })
    
          // TODO voice prophet close
          this.page = 'night'
          await this.updateNight('prophet', 'close')

          this.pageWitch()
        },
        async pageWitch () {
          let result
          // 沒有女巫
          if (!this.init.witch) {
            this.pageBright()
            return
          }
          // TODO voice witch open
          await this.updateNight('witch', 'open')

          const skill = _.get(_.find(this.roles, { name: '女巫' }), 'skill')

          // TODO voice 是否要使用解藥
          // 假裝有使用解藥
          if (!skill.help) await Swal.fire({ title: '你已使用過解藥', confirmButtonText: '確定' })
          else {
            // 是否要使用解藥
            result = await Swal.fire({
              title: `${this.willKill[0]} 號被殺了，你要救他嗎？`,
              showCancelButton: true,
              cancelButtonText: '不要',
              confirmButtonText: '要',
            })
            if (result.isConfirmed) {
              this.willKill = []
              skill.help = 0
            }
          }

          // TODO voice 是否要使用毒藥
          if (!skill.kill) {
            // 假裝有使用毒藥
            result = await Swal.fire({ title: '你已使用過毒藥', confirmButtonText: '確定' })
    
            // TODO voice witch close
            await this.updateNight('witch', 'close')
            this.pageBright()
            return
          }

          // 是否要使用毒藥
          result = await Swal.fire({
            title: '要使用毒藥嗎？',
            showCancelButton: true,
            cancelButtonText: '不要',
            confirmButtonText: '要',
          })
          if (!result.isConfirmed) {
            // TODO voice witch close
            await this.updateNight('witch', 'close')
            this.pageBright()
            return
          }
          this.page = 'witch'
        },
        async witchSkill (rId) {
          const result = await this.checkSelect(`確認要毒 ${rId} 號？`)
          if (!result.isConfirmed) return
          this.willKill.push(rId)
          const skill = _.get(_.find(this.roles, { name: '女巫' }), 'skill')
          skill.kill = 0

          // TODO voice witch close
          this.page = 'night'
          await this.updateNight('witch', 'close')
          this.pageBright()
        },
        async pageBright () {
          this.page = 'bright'
          //- TODO voice 天亮了
          //- TODO voice 昨晚...

          if (!this.willKill.length) return
          _.each(this.willKill, rId => this.roles[rId - 1].life = false)
          this.game.status = this.isGameOver()
        },
        async takeOneSkill (rId) {
          const result = await this.checkSelect(`確認要帶走 ${rId} 號？`)
          if (!result.isConfirmed) return
          const role = this.roles[rId - 1]
          role.life = false
          this.page = 'bright'
          this.game.status = this.isGameOver()
        },
        async updateNight (role, status) { // 更新哪個角色要閉眼睜眼
          this.night = { role, status }
          await sleep(SECONDS)
        },
        async checkSelect (title) {
          return await Swal.fire({
            title,
            showCancelButton: true,
            cancelButtonText: '重選',
            confirmButtonText: '確定',
          })
        },
        isGameOver () {
          if (this.page !== 'bright') return false

          const life = _.groupBy(_.get(_.groupBy(this.roles, 'life'), 'true'), 'type')

          // 好人勝利
          if (!_.get(life, 'wolf', []).length) {
            this.game.winner = '好人'
            this.game.loser = '狼人'
            return true
          }

          // 狼人勝利
          if (!_.get(life, 'people', []).length || !_.get(life, 'god', []).length) {
            this.game.winner = '狼人'
            this.game.loser = !_.get(life, 'people', []).length ? '人類' : '神職'
            return true
          }

          return false
        },
      },
    })


//-     roles: [
      {
        id: 6,
        name: '平民',
        type: 'good',
        text: '沒什麼用，好好玩吧 XD',
        skill: {},
        life: true
      },
      {
        id: 2,
        name: '預言家',
        type: 'good',
        text: '每晚可以查驗一名玩家是好人還是狼人',
        skill: {},
        life: true
      },
      {
        id: 3,
        name: '女巫',
        type: 'good',
        text: '有解藥及毒藥各一瓶，使用規則依在場玩家們為主',
        skill: {},
        life: true
      },
      {
        id: 1,
        name: '獵人',
        type: 'good',
        text: '除被毒殺之外，死後可決定是否要帶走一名玩家',
        skill: {},
        life: false
      },
      {
        id: 5,
        name: '狼人',
        type: 'bad',
        text: '每晚皆可與其他狼人討論要殺誰，如果你的夥伴都還活著的話',
        skill: {},
        life: true
      },
      {
        id: 4,
        name: '狼王',
        type: 'bad',
        text: '每晚皆可與其他狼人討論要殺誰，死後可決定是否要帶走一名玩家',
        skill: {},
        life: true
      },
    ]