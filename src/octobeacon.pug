extends /layout

block beforehtml
  - const title = 'Beacon 設定工具'

block style
  style
    :sass
      [v-cloak]
        display: none
      .input-group-text
        background-color: #ffffff

block content
  include /navbar
  #app.content.container.p-3(v-cloak)
    h3.text-center.m-0 Beacon 設定工具
    .d-flex.flex-column(v-if="!device")
      button.btn.btn-primary.mx-auto.my-2(type="button" @click="btnToggleScan") 選擇裝置
    #beacon-list(v-else)
      .card.my-3
        ul.list-group
          li.list-group-item.d-flex.justify-content-between.align-items-center.p-2 Version
            span {{ setting.version }}
      .card
        ul.list-group
          li.list-group-item.d-flex.flex-column(v-for="(beacon, bId) in beacons", :key=bId)
            .d-flex
              h5.my-auto Beacon {{ bId + 1}}
              .custom-control.custom-switch.ml-auto
                input.custom-control-input(type="checkbox" :id="`enabled-${bId}`" v-model="beacon.enabled")
                label.custom-control-label(:for="`enabled-${bId}`") 啟用
            template(v-if="beacon.enabled")
              .input-group.mt-3.mb-2
                .input-group-prepend
                  p.input-group-text HWID
                input.form-control.text-right(type="text" :id="`hwid-${bId}`" v-model="beacon.hwid")
              .input-group.mb-2
                .input-group-prepend
                  p.input-group-text Vendor
                input.form-control.text-right(type="text" :id="`vendor-${bId}`" v-model="beacon.vendor")
              .input-group.mb-2
                .input-group-prepend
                  p.input-group-text Lot
                input.form-control.text-right(type="text" :id="`lot-${bId}`" v-model="beacon.lot")
              .input-group.mb-1
                .input-group-prepend
                  p.input-group-text offset
                input.form-control.text-right(type="text" :id="`offset-${bId}`" v-model="beacon.offset")
      .d-flex.justify-content-center.mt-2
        button.btn.btn-primary.mx-1(type="button" @click="readValue") 讀取資料
        button.btn.btn-danger.mx-1(type="button" @click="writeValue") 寫入資料

block script
  script.
    const bluetooth = _.get(navigator, 'bluetooth')
    // Device Name: Maximum 30 bytes
    const DEVICE_NAME = "Octobeacon"
    // UUID Generator: https://www.uuidgenerator.net/version4
    const UUID_SERVICE = "89798198-0000-0000-0000-000000000000"
    const UUID_CHARACTERISTIC = "89798198-249d-48bd-894e-db156f1a70e6"
    
    window.vm = new Vue({
      el: '#app',
      data: {
        device: null,
        setting: {},
        beacons: [],
        scanning: false
      },
      mounted () {
      },
      computed: {
      },
      methods: { // TODO 讀取 & 寫入後斷線
        async getBluetoothAvailability () {
          return await _.invoke(navigator, 'bluetooth.getAvailability') === true
        },
        async btnToggleScan () {
          try {
            this.updateScanning()
            if (!this.scanning) {
              if (!await this.getBluetoothAvailability()) throw new Error('您的裝置不支援藍芽功能')
              await this.bluetoothRequest()
              await this.gattConnect()
            } else { // 停止掃描
              this.device.stop()
              this.device = null
            }
          } catch(err) {
            console.log(err)
          }
        },
        async bluetoothRequest() {
          let options = {
            "filters": [{
              "namePrefix": DEVICE_NAME
            }],
            "optionalServices": [UUID_SERVICE]
          }
          this.device = await bluetooth.requestDevice(options)
          if (!this.device) throw new Error("No device selected")
          this.device.addEventListener('gattserverdisconnected', this.onDisconnected())
        },
        async gattConnect() {
          if (!this.device) throw new Error('Device is not connected.')
          const gattServer = await this.device.gatt.connect()
          if (!gattServer.connected) throw new Error('BluetoothRemoteGATTServer is not connected.')
          console.log('BluetoothRemoteGATTServer is connected.')
          await this.readValue()
        },
        async onDisconnected(event) {
          console.log(`Device ${this.device.name} is disconnected.`)
        },
        async readValue() {
          try {
            // 確認有無連線
            if (!this.device.gatt.connected) await this.device.gatt.connect()

            const service = await this.device.gatt.getPrimaryService(UUID_SERVICE)
            const characteristic = await service.getCharacteristic(UUID_CHARACTERISTIC)

            const readValue = await characteristic.readValue() // DataView
            console.log('ReadValue: ', readValue.buffer)

            this.setting = {
              version: readValue.getUint8(0).toString(16), // 1 byte
              enabled: _.padStart(readValue.getUint8(1).toString(2), 8, '0'), // 1 byte
              ts: readValue.getBigUint64(2, true), // 8 byte
            }

            for (let i = 0; i < 8 ; i++) {
              this.$set(this.beacons, i, {
                enabled: this.setting.enabled[i] === '1',
                offset: _.padStart((readValue.getBigUint64(10 + 25*i, true) + this.setting.ts).toString(16), 16, '0'), // 8 byte
                hwid: this.getUint8Data(readValue, 18 + 25*i, 5), // 5 byte
                vendor: this.getUint8Data(readValue, 23 + 25*i, 4), // 4 byte
                lot: this.getUint8Data(readValue, 27 + 25*i, 8), // 8 byte
              })
            }
            console.log('Beacons: ', this.beacons)

            this.device.gatt.disconnect() // 斷開藍芽連線
          } catch(err){
            console.log(err.message)
            this.device.gatt.disconnect() // 斷開藍芽連線
          }
        },
        async writeValue() {
          try {
            // 確認有無連線
            if (!this.device.gatt.connected) await this.device.gatt.connect()

            const service = await this.device.gatt.getPrimaryService(UUID_SERVICE)
            const characteristic = await service.getCharacteristic(UUID_CHARACTERISTIC)

            // 新增一個新的 DataView
            const buffer = new ArrayBuffer(210)
            const dataView = new DataView(buffer)

            const enabled = _.parseInt(_.map(this.beacons, beacon => beacon.enabled ? '1' : '0').join(''), 2)
            dataView.setUint8(0, 1) // version 1
            dataView.setUint8(1, enabled)
            dataView.setBigUint64(2, BigInt(0))

            for (let i = 0; i < 8 ; i++) {
              const beacon = this.beacons[i]
              dataView.setBigUint64(10+25*i, BigInt('0x'+ beacon.offset), true)
              this.setUint8Data(dataView, 18 + 25*i, beacon.hwid)
              this.setUint8Data(dataView, 23 + 25*i, beacon.vendor)
              this.setUint8Data(dataView, 27 + 25*i, beacon.lot)
            }

            await characteristic.writeValue(dataView)
            console.log('寫入成功')
            this.device.gatt.disconnect() // 斷開藍芽連線
          } catch(err) {
            console.log(err.message)
            this.device.gatt.disconnect() // 斷開藍芽連線
          }
        },
        updateScanning () {
          this.scanning = _.get(this, 'device.active', false)
        },
        getUint8Data (dataView, start, len) {
          return _.times(len, i => _.padStart(dataView.getUint8(start + i).toString(16), 2, '0')).join('')
        },
        setUint8Data (dataView, start, data) {
          const chunks = _.map(_.chunk(data, 2), d => d.join(''))
          return _.each(chunks, (chunk, i) => dataView.setUint8(start+i, _.parseInt(chunk, 16)))
        },
        enabledToHex () {
          return _.parseInt(_.map(this.enabled, e => e ? '1' : '0').join(''), 2)
        }
      },
    })
