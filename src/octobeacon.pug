extends /layout

block beforehtml
  - const title = 'Beacon 設定工具'

block style
  style
    :sass
      [v-cloak]
        display: none
      #app 
        max-width: 760px
      .input-group-text
        background-color: #ffffff
        min-width: 80px

block content
  include /navbar
  #app.content.container.p-3(v-cloak)
    h3.text-center.m-0 Beacon 設定工具
    .d-flex.flex-column
      small.text-center.m-0.mb-2.text-muted Version {{ setting.version || 1}}
      .d-flex.justify-content-center.mt-2
        button.btn.btn-outline-success.btn-sm.mx-1.mb-2(type="button" @click="btnSelectDevice") 選擇裝置
        button.btn.btn-outline-primary.btn-sm.mx-1.mb-2(type="button" @click="readValue") 讀取資料
        button.btn.btn-outline-danger.btn-sm.mx-1.mb-2(type="button" @click="writeValue") 寫入資料
        button.btn.btn-outline-secondary.btn-sm.mx-1.mb-2(type="button" @click="setDefault") 回復預設
    #beacon-list.mt-3
      .card.text-monospace
        ul.list-group
          li.list-group-item.d-flex.flex-column(v-for="(beacon, bId) in beacons", :key=bId)
            .d-flex
              h5.my-auto Beacon {{ bId + 1}}
              .custom-control.custom-switch.ml-auto
                input.custom-control-input(type="checkbox" :id="`enabled-${bId}`" v-model="beacon.enabled")
                label.custom-control-label(:for="`enabled-${bId}`") 啟用
            .was-validated(v-if="beacon.enabled")
              .input-group.input-group-sm.mt-3
                .input-group-prepend
                  p.input-group-text.justify-content-end offset
                input.form-control.text-right(type="text" :id="`offset-${bId}`" v-model="beacon.offset" inputmode="email" maxlength="16" pattern="[A-Fa-f0-9]{16}" required)
                .invalid-feedback.text-right 需由 16 進位組成 16 碼
              .input-group.input-group-sm.mt-2
                .input-group-prepend
                  p.input-group-text.justify-content-end hwid
                input.form-control.text-right(type="text" :id="`hwid-${bId}`" v-model="beacon.hwid" inputmode="email" maxlength="10" pattern="[A-Fa-f0-9]{10}" required)
                .invalid-feedback.text-right 需由 16 進位組成 10 碼
              .input-group.input-group-sm.mt-2
                .input-group-prepend
                  p.input-group-text.justify-content-end vendor
                input.form-control.text-right(type="text" :id="`vendor-${bId}`" v-model="beacon.vendor" inputmode="email" maxlength="8"  pattern="[A-Fa-f0-9]{8}" required)
                .invalid-feedback.text-right 需由 16 進位組成 8 碼
              .input-group.input-group-sm.mt-2
                .input-group-prepend
                  p.input-group-text.justify-content-end lot
                input.form-control.text-right(type="text" :id="`lot-${bId}`" v-model="beacon.lot" inputmode="email" maxlength="16" pattern="[A-Fa-f0-9]{16}" required)
                .invalid-feedback.text-right 需由 16 進位組成 16 碼

block script
  script.
    const bluetooth = _.get(navigator, 'bluetooth')
    // Device Name: Maximum 30 bytes
    const DEVICE_NAME = 'Octobeacon'
    // UUID Generator: https://www.uuidgenerator.net/version4
    const UUID_SERVICE = '89798198-0000-0000-0000-000000000000'
    const UUID_CHARACTERISTIC = '89798198-249d-48bd-894e-db156f1a70e6'
    const SESSION_KEY = 'pug-octobeacon'

    window.vm = new Vue({
      el: '#app',
      data: {
        device: null,
        setting: {},
        beacons: [],
        scanning: false,
      },
      mounted () {
        this.setWatchBeacons()
      },
      computed: {
      },
      methods: {
        setWatchBeacons () {
          const session = JSON.parse(localStorage.getItem(SESSION_KEY))
          session ? this.$set(this, 'beacons', session) : this.setDefault()
          this.$watch('beacons', () => {
            localStorage.setItem(SESSION_KEY, JSON.stringify(this.beacons))
          }, { deep: true })
        },
        async getBluetoothAvailability () {
          return await _.invoke(navigator, 'bluetooth.getAvailability')
        },
        async btnSelectDevice () {
          try {
            console.log('btnSelectDevice')
            this.updateScanning()
            if (!this.scanning) {
              if (!await this.getBluetoothAvailability()) throw new Error('您的裝置不支援藍芽功能')
              await this.bluetoothRequest()
              await this.gattConnect()
            } else { // 停止掃描
              this.device.stop()
              this.device = null
            }
          } catch (err) {
            Swal.fire({ icon: 'error', title: '選擇裝置失敗', text: err.message })
          }
        },
        async bluetoothRequest () {
          const options = {
            filters: [{
              namePrefix: DEVICE_NAME,
            }],
            optionalServices: [UUID_SERVICE],
          }
          this.device = await bluetooth.requestDevice(options)
          if (!this.device) throw new Error('未選擇藍芽裝置')
          this.device.addEventListener('gattserverdisconnected', this.onDisconnected())
        },
        onDisconnected () {
          console.log(`Device ${this.device.name} is disconnected.`)
        },
        async gattConnect () {
          if (!this.device) throw new Error('未選擇藍芽裝置')
          const gattServer = await this.device.gatt.connect()
          if (!gattServer.connected) throw new Error('BluetoothRemoteGATTServer is not connected.')
          console.log('BluetoothRemoteGATTServer is connected.')
          await this.readValue()
        },
        async readValue () {
          try {
            await this.checkGattConnect()
            const service = await this.device.gatt.getPrimaryService(UUID_SERVICE)
            const characteristic = await service.getCharacteristic(UUID_CHARACTERISTIC)

            const readValue = await characteristic.readValue() // DataView
            console.log('ReadValue: ', readValue.buffer)

            this.setting = {
              version: readValue.getUint8(0).toString(16), // 1 byte
              enabled: _.padStart(readValue.getUint8(1).toString(2), 8, '0'), // 1 byte
              ts: readValue.getBigUint64(2, true), // 8 byte
            }

            for (let i = 0; i < 8; i++) {
              this.$set(this.beacons, i, {
                enabled: this.setting.enabled[i] === '1',
                offset: _.padStart((readValue.getBigUint64(10 + 25 * i, true) + this.setting.ts).toString(16), 16, '0'), // 8 byte
                hwid: this.getUint8Data(readValue, 18 + 25 * i, 5), // 5 byte
                vendor: this.getUint8Data(readValue, 23 + 25 * i, 4), // 4 byte
                lot: this.getUint8Data(readValue, 27 + 25 * i, 8), // 8 byte
              })
            }
            console.log('Beacons: ', this.beacons)
          } catch (err) {
            console.log(err.message)
            Swal.fire({ icon: 'error', title:'讀取失敗', text: err.message})
          }
          if (this.device) this.device.gatt.disconnect() // 斷開藍芽連線
        },
        async writeValue () {
          try {
            this.checkInput() // 檢查格式
            await this.checkGattConnect()
            const service = await this.device.gatt.getPrimaryService(UUID_SERVICE)
            const characteristic = await service.getCharacteristic(UUID_CHARACTERISTIC)

            // 新增一個新的 DataView
            const buffer = new ArrayBuffer(210)
            const dataView = new DataView(buffer)

            const enabled = _.parseInt(_.map(this.beacons, beacon => beacon.enabled ? '1' : '0').join(''), 2)
            dataView.setUint8(0, 1) // version 1
            dataView.setUint8(1, enabled)
            dataView.setBigUint64(2, BigInt(0))

            for (let i = 0; i < 8; i++) {
              const beacon = this.beacons[i]
              dataView.setBigUint64(10 + 25 * i, BigInt('0x' + beacon.offset), true)
              this.setUint8Data(dataView, 18 + 25 * i, beacon.hwid)
              this.setUint8Data(dataView, 23 + 25 * i, beacon.vendor)
              this.setUint8Data(dataView, 27 + 25 * i, beacon.lot)
            }

            await characteristic.writeValue(dataView)
            Swal.fire({ icon: 'succerr', text: '請再次讀取資料確認是否成功寫入' })
          } catch (err) {
            console.log(err.message)
            Swal.fire({ icon: 'error', title:'寫入失敗', text: err.message})
          }
          if (this.device) this.device.gatt.disconnect() // 斷開藍芽連線
        },
        async checkGattConnect () { // 確認有無連線
          await this.btnSelectDevice()
          if (!this.device) throw new Error('請選擇藍芽裝置')
        },
        async setDefault () {
          const result = await Swal.fire({
            icon: 'warning',
            text: '確定要清除資料回復預設值？',
            showCancelButton: true,
            confirmButtonText: '回復預設',
            cancelButtonText: '保留資料',
          })
          if (!result.value) return
          this.$set(this, 'beacons', _.times(8, i => ({
            enabled: true,
            offset: _.padStart('', 16, '0'),
            hwid: _.padStart('', 10, '0'),
            vendor: _.padStart('', 8, '0'),
            lot: _.padStart('', 16, '0'),
          })))
        },
        updateScanning () {
          this.scanning = _.get(this, 'device.active', false)
        },
        getUint8Data (dataView, start, len) {
          return _.times(len, i => _.padStart(dataView.getUint8(start + i).toString(16), 2, '0')).join('')
        },
        setUint8Data (dataView, start, data) {
          const chunks = _.map(_.chunk(data, 2), d => d.join(''))
          return _.each(chunks, (chunk, i) => dataView.setUint8(start + i, _.parseInt(chunk, 16)))
        },
        checkInput () {
          for (let i=0; i<this.beacons.length; i++) {
            const beacon = this.beacons[i]
            if (!(/[0-9a-fA-f]{16}/).test(beacon.offset)) throw new Error(`Beacon ${i+1}：offset 格式錯誤`)
            if (!(/[0-9a-fA-f]{10}/).test(beacon.hwid)) throw new Error(`Beacon ${i+1}：hwid 格式錯誤`)
            if (!(/[0-9a-fA-f]{8}/).test(beacon.vendor)) throw new Error(`Beacon ${i+1}：vendor 格式錯誤`)
            if (!(/[0-9a-fA-f]{16}/).test(beacon.lot)) throw new Error(`Beacon ${i+1}：lot 格式錯誤`)
          }
        },
        
      },
    })
