extends /layout

block beforehtml
  - const title = 'Beacon 工作坊'

block style
  style
    :sass
      [v-cloak]
        display: none
      .input-group-text
        background-color: #ffffff

block content
  include /navbar
  #app.content.container.p-3(v-cloak)
    h3.text-center.m-0 Beacon 工作坊
    .d-flex.flex-column(v-if="!device")
      //- button.btn.btn-primary.mx-auto.my-2(type="button" @click="btnToggleScan") 選擇裝置
    //- #beacon-list(v-else)
    #beacon-list
      .card.my-3
        ul.list-group
          li.list-group-item.d-flex.justify-content-between.align-items-center.p-2 Version
            span {{ setting.version }}
          li.list-group-item.d-flex.justify-content-between.align-items-center.p-2 Timestamp
            span {{ setting.ts }}
      .card
        ul.list-group
          li.list-group-item.d-flex.flex-column(v-for="(beacon, bId) in beacons", :key=bId)
            .d-flex
              h5.my-auto Beacon {{ bId + 1}}
              .custom-control.custom-switch.ml-auto
                input.custom-control-input(type="checkbox" :id="`switch-${bId}`" v-model="beacon.switch")
                label.custom-control-label(:for="`switch-${bId}`") 啟用
            template(v-if="beacon.switch")
              .input-group.mt-3.mb-2
                .input-group-prepend
                  p.input-group-text HWID
                input.form-control.text-right(type="text" :id="`hwid-${bId}`" v-model="beacon.hwid")
              .input-group.mb-2
                .input-group-prepend
                  p.input-group-text Vendor
                input.form-control.text-right(type="text" :id="`vendor-${bId}`" v-model="beacon.vendor")
              .input-group.mb-2
                .input-group-prepend
                  p.input-group-text Lot
                input.form-control.text-right(type="text" :id="`lot-${bId}`" v-model="beacon.lot")
              .input-group.mb-1
                .input-group-prepend
                  p.input-group-text ts
                input.form-control.text-right(type="text" :id="`ts-${bId}`" v-model="beacon.ts")
      .d-flex.justify-content-center.mt-2
        button.btn.btn-primary.mx-1(type="button" @click="readValue") 讀取資料
        button.btn.btn-danger.mx-1(type="button" @click="writeValue(beaconTmp)") 寫入資料

block script
  script.
    const bluetooth = _.get(navigator, 'bluetooth')
    // Device Name: Maximum 30 bytes
    const DEVICE_NAME = "Octobeacon"
    // UUID Generator: https://www.uuidgenerator.net/version4
    const UUID_SERVICE = "89798198-0000-0000-0000-000000000000"
    const UUID_CHARACTERISTIC = "89798198-249d-48bd-894e-db156f1a70e6"
    
    window.vm = new Vue({
      el: '#app',
      data: {
        device: null,
        setting: {
          version: 1,
          enabled: '11111111',
          ts: '0000000000000001',
        },
        beacons: [
          { 
            switch: true,
            hwid: '01deadbeef',
            vendor: '5cf2a423',
            lot: '8c194fe41d7fe34f',
            ts: '0000000000000001',
          },
          { 
            switch: true,
            hwid: '01deadbeef',
            vendor: '5cf2a423',
            lot: '8c194fe41d7fe34f',
            ts: '0000000000000002',
          },
          { 
            switch: true,
            hwid: '01deadbeef',
            vendor: '5cf2a423',
            lot: '8c194fe41d7fe34f',
            ts: '0000000000000003',
          },
          { 
            switch: true,
            hwid: '01deadbeef',
            vendor: '5cf2a423',
            lot: '8c194fe41d7fe34f',
            ts: '0000000000000004',
          },
          { 
            switch: true,
            hwid: '01deadbeef',
            vendor: '5cf2a423',
            lot: '8c194fe41d7fe34f',
            ts: '0000000000000005',
          },
          { 
            switch: true,
            hwid: '01deadbeef',
            vendor: '5cf2a423',
            lot: '8c194fe41d7fe34f',
            ts: '0000000000000006',
          },
          { 
            switch: true,
            hwid: '01deadbeef',
            vendor: '5cf2a423',
            lot: '8c194fe41d7fe34f',
            ts: '0000000000000007',
          },
          { 
            switch: true,
            hwid: '01deadbeef',
            vendor: '5cf2a423',
            lot: '8c194fe41d7fe34f',
            ts: '0000000000000008',
          },
        ],
        beaconsRead: [],
        beaconTmp: "",
        scanning: false
      },
      mounted () {
      },
      computed: {
      },
      methods: {
        async getBluetoothAvailability () {
          return await _.invoke(navigator, 'bluetooth.getAvailability') === true
        },
        async btnToggleScan () {
          try {
            this.updateScanning()
            if (!this.scanning) {
              if (!await this.getBluetoothAvailability()) throw new Error('您的裝置不支援藍芽功能')
              await this.bluetoothRequest()
              await this.gattConnect()
            } else { // 停止掃描
              this.device.stop()
              this.device = null
            }
          } catch(err) {
            console.log(err)
          }
        },
        async bluetoothRequest() {
          let options = {
            "filters": [{
              "name": DEVICE_NAME
            }],
            "optionalServices": [UUID_SERVICE]
          }
          this.device = await bluetooth.requestDevice(options)
          if (!this.device) throw new Error("No device selected")
          this.device.addEventListener('gattserverdisconnected', this.onDisconnected())
        },
        async gattConnect() {
          if (!this.device) throw new Error('Device is not connected.')
          const gattServer = await this.device.gatt.connect()
          if (!gattServer.connected) throw new Error('BluetoothRemoteGATTServer is not connected.')
          console.log('BluetoothRemoteGATTServer is connected.')
          await this.readValue()
        },
        async onDisconnected(event) {
          console.log(`Device ${this.device.name} is disconnected.`)
        },
        async readValue() {
          const service = await this.device.gatt.getPrimaryService(UUID_SERVICE)
          const characteristic = await service.getCharacteristic(UUID_CHARACTERISTIC)

          this.beaconsRead = await characteristic.readValue()

          const decoder = new TextDecoder('utf-8')
          console.log(`Description: ${decoder.decode(this.beaconsRead)}`)
          console.log(this.beaconsRead)
        },
        async writeValue(data) {
          const service = await this.device.gatt.getPrimaryService(UUID_SERVICE);
          const characteristic = await service.getCharacteristic(UUID_CHARACTERISTIC)

          const encoder = new TextEncoder('utf-8')
          await characteristic.writeValue(encoder.encode(data))
        },
        updateScanning () {
          this.scanning = _.get(this, 'device.active', false)
        },
      },
    })
