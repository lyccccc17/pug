extends ../layout

block beforehtml
  - const title = '代辦事項'

block style
  style
    :sass
      [v-cloak]
        display: none

block content
  include ../navbar
  #app.container.pt-3
    h3.m-0 代辦事項
    p 將存放在瀏覽器上，請小心不要誤清除資料
    form
      .form-row
        .form-group.col-md-6
          label(for='duedate') 日期
          vue-ctk-date-time-picker(label='截止日期' v-model='duedate' format='YYYY-MM-DD' formatted='ll' noHeader autoClose onlyDate)
        .form-group.col-md-6
          label(for='todo') 代辦事項
          input#todo.form-control(type='text' v-model='todoItem')
      button.btn.btn-outline-primary.btn-sm.btn-block(type='button' @click='addItem()') 新增
      
    #todo-list.card.mt-3
      .card-body
        h5.m-0.card-title 代辦清單
      ul.list-group.list-group-flush
        li.list-group-item.d-flex.justify-content-between(v-for='(item, index) in todoList' :key='index')
          p.m-0.my-auto {{item.date}} | {{item.todo}}
          .button-group
            button.btn.btn-outline-primary.btn-sm.mx-1(type='button' @click='done(index)') V
            button.btn.btn-outline-danger.btn-sm(type='button' @click='remove(index)') X
      .card-body.d-flex(v-if='todoList.length !== 0')
        button.btn.btn-outline-danger.btn-sm.ml-auto(type='button' @click='delTodoAll()') 清空
    #done-list.card.mt-3
      .card-body
        h5.m-0.card-title 已完成
      ul.list-group.list-group-flush
        li.list-group-item.d-flex.justify-content-between(v-for='(item, index) in doneList' :key='index')
          p.m-0.my-auto {{item.date}} | {{item.todo}}
      .card-body.d-flex(v-if='doneList.length !== 0')
        button.btn.btn-outline-danger.btn-sm.ml-auto(type='button' @click='delDoneAll()') 清空

block script
  script.
    Vue.component('vue-ctk-date-time-picker', window['vue-ctk-date-time-picker'])
    const vm = new Vue({ // eslint-disable-line no-unused-vars
      el: '#app',
      data: {
        doneList: [],
        duedate: '',
        todoItem: '代辦事項',
        todoList: [],
      },
      async mounted () {
        await this.init()
      },
      computed: {},
      methods: {
        alert (icon, title) {
          Swal.fire({
            title,
            icon,
          })
        },
        init () {
          this.todoList = (localStorage.getItem('todoList')) ? JSON.parse(localStorage.getItem('todoList')) : []
          this.doneList = (localStorage.getItem('doneList')) ? JSON.parse(localStorage.getItem('doneList')) : []
        },
        done (index) {
          this.doneList.push(this.todoList[index])
          this.remove(index)
          localStorage.setItem('doneList', JSON.stringify(this.doneList))
        },
        addItem () {
          if (!/^\d{4}-\d{2}-\d{2}$/.test(this.duedate)) {
            return this.alert('warning', '日期格式輸入錯誤')
          }
          if (_.trim(this.todoItem) === '') {
            return this.alert('warning', '請輸入代辦事項')
          }
          this.todoList.push({
            date: this.duedate,
            todo: this.todoItem,
          })
          localStorage.setItem('todoList', JSON.stringify(this.todoList))
        },
        remove (index) {
          this.todoList.splice(index, 1)
          localStorage.setItem('todoList', JSON.stringify(this.todoList))
        },
        async delTodoAll () {
          const confirm = await Swal.fire({
            title: '確定要清空所有代辦事項？',
            text: '清空後將無法救回',
            icon: 'warning',
            cancelButtonText: '取消',
            confirmButtonColor: '#3085d6',
            confirmButtonText: '確定',
            reverseButtons: true,
            showCancelButton: true,
          })
          if (!confirm.value) return
          localStorage.removeItem('todoList')
          this.init()
        },
        async delDoneAll () {
          const confirm = await Swal.fire({
            title: '確定要清空所有完成事項？',
            text: '清空後將無法救回',
            icon: 'warning',
            cancelButtonText: '取消',
            confirmButtonColor: '#3085d6',
            confirmButtonText: '確定',
            reverseButtons: true,
            showCancelButton: true,
          })
          if (!confirm.value) return
          localStorage.removeItem('doneList')
          this.init()
        },
      },
    })
