extends ../layout

block beforehtml
  - const title = '數獨'

block style
  style
    :sass
      [v-cloak]
        display: none
      #app
        .card
          width: 450px
        input
          width: 40px
          height: 40px
        .prediction
          height: 55px

block content
  include ../navbar
  #app.content.p-3.d-flex.flex-column.align-items-center
    .card.bg-light.mb-3
      h2.card-header.text-center 數獨
      .card-body.d-flex.flex-column.align-items-center
        .prediction.mb-3
          p.text-center.m-0 {{checkAns}}
          button.btn.btn-outline-success.btn-sm.mt-1.mr-1( v-for='(n, index) in refAns.ans' :key='index' @click='selectAns(index)') {{refAns.ans[index]}}
        .paly
          .sudoku-x(v-for='(sudokuX, sudokuXId) in sudoku' :key='sudokuXId')
            input.sudoku-y.text-center(type='text' v-model='sudoku[sudokuXId][sudokuYId]' v-for='(sudokuY, sudokuYId) in sudokuX' :key='sudokuYId' @input='referenceAns(sudokuXId, sudokuYId)')

block script
  script.
    const vm = new Vue({ // eslint-disable-line no-unused-vars
      el: '#app',
      data: {
        sudoku: [
          ['8', '', '', '', '', '', '', '', ''],
          ['', '', '3', '6', '', '', '', '', ''],
          ['', '7', '', '', '9', '', '2', '', ''],
          ['', '5', '', '', '', '7', '', '', ''],
          ['', '', '', '', '4', '5', '7', '', ''],
          ['', '', '', '1', '', '', '', '3', ''],
          ['', '', '1', '', '', '', '', '6', '8'],
          ['', '', '8', '5', '', '', '', '1', ''],
          ['', '9', '', '', '', '', '4', '', ''],
        ],
        box: {},
        row: {},
        col: {},
        refAns: [],
        userAns: '',
        alert: '',
      },
      created () {
        // this.init()
      },
      computed: {
        checkAns () {
          this.box = {}
          for (let x = 0; x < 9; x++) {
            this.row = {}
            this.col = {}
            for (let y = 0; y < 9; y++) {
              const nx = this.sudoku[x][y]
              const ny = this.sudoku[y][x]
              const boxId = parseInt(y / 3) + 3 * parseInt(x / 3) // 屬於哪一個九宮格: 0 ~ 8

              if (this.row[nx]) {
                this.alert = 'x軸已重複'
                return
              }
              this.row[nx] = nx
              if (this.col[ny]) {
                this.alert = 'y軸已重複'
                return
              }
              this.col[ny] = ny
              if (this.box[boxId]) {
                if (this.box[boxId][nx]) {
                  this.alert = '九宮格已重複'
                  return
                }
                this.box[boxId][nx] = nx
                continue
              }
              this.box[boxId] = {}
              this.box[boxId][nx] = nx
            }
          }
          this.alert = '請答題'
        },
      },
      methods: {
        // init () {
        // },
        referenceAns (xId, yId) {
          this.refAns = { xId, yId, ans: [] }
          if (this.checkAns === '請答題') return

          const existX = this.sudoku[xId]
          const existY = []
          const existBox = []
          const boxId = parseInt(yId / 3) + 3 * parseInt(xId / 3) // 屬於哪一個九宮格: 0 ~ 8
    
          for (let x = 0; x < 9; x++) {
            for (let y = 0; y < 9; y++) {
              const number = this.sudoku[x][y]
              const box = parseInt(y / 3) + 3 * parseInt(x / 3)
              if (y === yId) existY.push(parseInt(number))
              if (box === boxId) existBox.push(parseInt(number))
            }
          }
    
          const existAll = _.uniq(_.concat(existY, existBox, existX))
          for (const i of _.range(1, 9)) {
            if (_.indexOf(existAll, i) === -1) this.refAns.ans.push(i)
          }
        },
        selectAns (index) {
          this.$set(this.sudoku[this.refAns.xId], this.refAns.yId, this.refAns.ans[index])
          this.refAns.ans = []
        },
      },
    })
