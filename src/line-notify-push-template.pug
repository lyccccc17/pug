extends /layout

block beforehtml
  -
    const title = 'LINE Notify 推送訊息工具'
    const description = 'LINE Notify 推送訊息工具'

block style
  meta(name="description" content=description)
  meta(property="og:description", content=description)
  style
    :sass
      [v-cloak]
        display: none
      .alert
        white-space: pre-wrap
      textarea
        min-height: 300px

block content
  include /navbar
  #app.content.container.text-monospace.mb-3(v-cloak)
    h2.py-3.m-0 LINE Notify 推送訊息工具
    .form-group
      label(for="inputCsv") CSV 網址（資料會放到參數 #[span.text-danger row]，且以第一列當作 key）
      input.form-control(type="text" id="inputCsv" v-model="s.csv" placeholder="請填寫 CSV 網址")
    .card.mb-3(v-for="(msg, msgId) in s.msgs" :key="msgId")
      .card-body
        .d-flex.mb-3
          h5.card-title.mt-auto.mb-0 第 {{ msgId+1 }} 筆訊息
          button.btn.btn-danger.btn-sm.ml-auto(type="button" @click="btnDelMsg(msgId)") #[i.fa.fa-trash-o]
            span.pl-2 移除
        .row
          .col-12.col-lg-4
            .form-group
              label(:for="`inputStickerPackageId-${msgId}`") StickerPackageId
              button.btn.btn-link.py-0(type="button" @click="btnStickerTeach") #[i.fa.fa-question-circle-o]
              input.form-control(type="text" :id="`inputStickerPackageId-${msgId}`" v-model="msg.stickerPackageId" placeholder="（選填）")
          .col-12.col-lg-4
            .form-group
              label(:for="`inputStickerId-${msgId}`") StickerId
              button.btn.btn-link.py-0(type="button" @click="btnStickerTeach") #[i.fa.fa-question-circle-o]
              input.form-control(type="text" :id="`inputStickerId-${msgId}`" v-model="msg.stickerId" placeholder="（選填）")
          .col-12.col-lg-4
            .form-group 
              label(:for="`inputImg-${msgId}`") 圖片連結（HTTP／HTTPS）
              input.form-control(type="text" :id="`inputImg-${msgId}`" v-model="msg.img" placeholder="（選填）")
        .form-group 
          label(:for="`inputMsg-${msgId}`") 推送訊息內容（{{ msg.message.length }}／1000）
          textarea.form-control(type="text" :id="`inputMsg-${msgId}`" v-model="msg.message" maxlength='1000' placeholder="（必填，可填寫空格）")
    .alert.alert-danger.alert-dismissible.fade.show.mt-3(role="alert" v-if="errors")
      p.m-0 {{ errors }}#[br]欲了解詳細錯誤資訊，請按 F12 查看 Console
      button.close(type="button" data-dismiss="alert" aria-label="Close" @click="errors = ''")
        span(aria-hidden) &times;
    .alert.alert-success.alert-dismissible.fade.show.mt-3(role="alert" v-if="pushStatus.finish && pushStatus.success > 0")
      p.m-0 成功推送給 {{ pushStatus.success }}／{{ pushStatus.userCount }} 位使用者 {{ s.msgs.length }} 筆訊息
      button.close(type="button" data-dismiss="alert" aria-label="Close")
        span(aria-hidden) &times;
    button.btn.btn-danger.mr-3(type="button" disabled v-if="status") {{ status }}
    .d-flex(v-else)
      button.btn.btn-danger.mr-3(type="button" @click="btnPushMsg" v-if="s.msgs.length > 0") 推送訊息
      button.btn.btn-success.mr-3(type="button" @click="btnAddMsg") 新增推送訊息
      a.btn.btn-outline-info.mr-3(target="_blank" href="https://line.me/R/ti/p/@736cebrk" data-toggle="tooltip" data-placement="top" title="by 和風信使 taichunmin") Flex 開發人員工具
      a.btn.btn-outline-info(target="_blank" href="https://notify-bot.line.me/doc/en/") Notify API 文件

block script
  script.
    const SESSION_KEY = 'pug-line-notify-push-template'
    window.vm = new Vue({
      el: '#app',
      data: {
        errors: '',
        pushStatus: {}, // 推送狀態
        status: '', // 當前狀態
        s: {
          csv: '',
          msgs: [
            {
              img: 'https://i.imgur.com/o0tEo3q.png',
              message: '嗨～這是傳給 ${row.name} 的預設推送訊息\n\n請自行更改訊息內容：）', // eslint-disable-line
              stickerId: 106,
              stickerPackageId: 1,
            },
          ],
        },
      },
      mounted () {
        this.autoSaveLocalstorage()
      },
      methods: {
        autoSaveLocalstorage () {
          const session = JSON.parse(localStorage.getItem(SESSION_KEY))
          if (session) this.$set(this, 's', session)
          this.$watch('s', () => {
            localStorage.setItem(SESSION_KEY, JSON.stringify(this.s))
          }, { deep: true })
        },
        async btnPushMsg () {
          this.errors = ''
          const errors = []
          this.pushStatus = { success: 0, count: 0, userCount: 0, finish: false }
          try {
            const pushData = this.s

            for (const msg of pushData.msgs) {
              if (!msg.message) throw new Error('推送訊息內容不可為空')
              if (!!msg.stickerPackageId ^ !!msg.stickerId) throw new Error('若要推送貼圖，StickerPackageId 及 StickerId 不可為空')
            }

            this.status = '讀取 CSV 中'
            const rows = await this.getCsv(pushData.csv)
            if (rows.length < 1) throw new Error('無法從此 CSV 內讀取資料')
            if (!rows[0].access_token) throw new Error('CSV 格式錯誤：缺少參數「access_token」')

            this.status = '確認推送筆數'
            const pushStatus = this.pushStatus
            pushStatus.userCount = rows.length
            const result = await Swal.fire({
              icon: 'warning',
              title: '準備推送訊息',
              text: `即將推送給 ${pushStatus.userCount} 位使用者 ${pushData.msgs.length} 筆訊息！`,
              showCancelButton: true,
              showConfirmButton: false,
              showDenyButton: true,
              cancelButtonText: '取消',
              denyButtonText: '推送',
            })
            if (!result.isDenied) throw new Error('已取消推送訊息')

            for (const row of rows) {
              try {
                pushStatus.count++

                for (const i in pushData.msgs) {
                  const msg = pushData.msgs[i]
                  this.status = `正在推送給第 ${pushStatus.count}／${pushStatus.userCount} 位使用者，第 ${parseInt(i) + 1} 筆訊息`
                  const message = _.template(msg.message)({ row })
                  await this.notify({
                    accessToken: row.access_token,
                    message,
                    imageFullsize: msg.img,
                    imageThumbnail: msg.img,
                    stickerId: msg.stickerId,
                    stickerPackageId: msg.stickerPackageId,
                  })
                }
                pushStatus.success++ // 推送成功
              } catch (err) {
                err.message = _.get(err, 'response.data.message', err.message)
                if (_.get(err, 'response.data.status') === 400) throw new Error(`推送訊息格式錯誤：${err.message}`)
                errors.push(`第 ${pushStatus.count} 位使用者訊息推送失敗：${err.message}`)
                console.log(err)
              }
            }
          } catch (err) {
            console.log(err)
            errors.push(_.get(err, 'message', err))
            Swal.fire({ icon: 'error', title: '推送失敗', text: _.get(err, 'message', err) })
          }
          this.status = ''
          this.errors = errors.join('\n')
          this.pushStatus.finish = true
        },
        async btnAddMsg () {
          this.s.msgs.push({
            img: '',
            message: '',
            stickerId: '',
            stickerPackageId: '',
          })
        },
        async btnDelMsg (msgId) {
          this.s.msgs.splice(msgId, 1)
        },
        async notify ({ accessToken, message, imageFullsize, imageThumbnail, stickerId, stickerPackageId }) {
          await axios.post('https://us-central1-yuanchi.cloudfunctions.net/cors-anywhere', Qs.stringify({
            message,
            imageFullsize,
            imageThumbnail,
            stickerId,
            stickerPackageId,
          }), {
            params: { u: 'https://notify-api.line.me/api/notify' },
            headers: {
              Authorization: `Bearer ${accessToken}`,
            },
          })
        },
        async getCsv (url) {
          const csv = _.trim(_.get(await axios.get(url), 'data')) // _.trim：把前後多餘的空格修掉
          return _.get(Papa.parse(csv, {
            encoding: 'utf8',
            header: true,
          }), 'data', [])
        },
        async btnStickerTeach () {
          const result = await Swal.fire({
            icon: 'info',
            title: 'Sticker 查找教學',
            text: '使用「Flex 開發人員工具」傳送貼圖，即可找到 stickerId 及 packageId',
            showCancelButton: true,
            cancelButtonText: '關閉',
            confirmButtonText: '使用',
          })
          if (result.value) window.open("https://line.me/R/ti/p/@736cebrk")
        }
      },
    })
